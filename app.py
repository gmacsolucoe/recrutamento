import streamlit as st
import pandas as pd
from PyPDF2 import PdfReader
from docx import Document
import plotly.express as px
import re
import time
import openai
import json
import os
from datetime import date

# --- Configura√ß√µes da API OpenAI ---
openai.api_key = st.secrets["openai_api_key"]

st.set_page_config(page_title="Analisador Virtual - Big Tech RHday", layout="wide")

# --- Fun√ß√µes de Salvar e Carregar Dados ---
def salvar_dados_analisados(df):
    try:
        df.to_json("analise_salva.json", orient="records", date_format="iso")
        return True
    except Exception as e:
        st.error(f"Erro ao salvar o arquivo: {e}")
        return False

def carregar_dados_analisados():
    if os.path.exists("analise_salva.json"):
        try:
            df = pd.read_json("analise_salva.json", orient="records")
            df['Data de Upload'] = pd.to_datetime(df['Data de Upload']).dt.date
            return df
        except Exception as e:
            st.error(f"Erro ao carregar o arquivo salvo: {e}")
            return pd.DataFrame()
    return pd.DataFrame()


# --- Inicializa√ß√£o do estado da sess√£o ---
if "df_analise" not in st.session_state:
    st.session_state["df_analise"] = carregar_dados_analisados()

if "arquivos" not in st.session_state:
    st.session_state["arquivos"] = []


menu = st.sidebar.radio(
    "Menu",
    ["üè† Home", "üè∑Ô∏è Upload Curr√≠culos", "üöÄ Analisador Excellence Big Tech", "üìÖ RHday"]
)

# --- Palavras-chave para pontua√ß√£o e an√°lise (voc√™ pode editar aqui) ---
Habilidades_Chave = {
    "Python": 20, "SQL": 20, "Excel": 10, "Power BI": 15, "Log√≠stica": 5,
    "Dados": 10, "An√°lise": 10, "Marketing": 5, "Vendas": 5, "Atendimento": 5, "RH": 5
}
Certificacoes_Chave = {
    "PMP": 15, "Scrum": 10, "AWS": 20, "AZ-900": 10, "Google Cloud": 15
}

# --- Fun√ß√£o para salvar arquivos permanentemente ---
def salvar_curriculos(arquivos):
    folder_path = "curriculos_salvos"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    saved_count = 0
    for arquivo in arquivos:
        file_path = os.path.join(folder_path, arquivo.name)
        with open(file_path, "wb") as f:
            f.write(arquivo.getbuffer())
        saved_count += 1
    st.success(f"‚úÖ {saved_count} arquivo(s) salvo(s) permanentemente na pasta '{folder_path}'!")


# --- Fun√ß√£o para analisar curr√≠culo (M√©todo H√≠brido: IA + C√≥digo) ---
def analisar_curriculo(texto_curriculo):
    prompt_detalhado = f"""
    Analise o curr√≠culo a seguir e forne√ßa uma avalia√ß√£o detalhada em t√≥picos.
    O objetivo √© criar um parecer de recrutador que cubra os seguintes pontos:
    1. Resumo Profissional: Um par√°grafo avaliando o perfil do candidato.
    2. Destaques: Liste os pontos fortes e diferenciais do candidato (experi√™ncia, habilidades).
    3. Oportunidades: Liste √°reas onde o candidato poderia se desenvolver ou adquirir novas habilidades.
    4. Relev√¢ncia para a Vaga: Um coment√°rio sobre o qu√£o alinhado o perfil est√° com uma vaga de tecnologia em uma Big Tech, como Google, Amazon ou Meta.

    Curr√≠culo:
    {texto_curriculo[:4000]}
    """
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente de RH. Forne√ßa uma an√°lise de curr√≠culo profissional e detalhada."},
                {"role": "user", "content": prompt_detalhado}
            ],
            temperature=0.5
        )
        resumo_ia = response.choices[0].message.content
    except Exception as e:
        resumo_ia = "Falha ao gerar resumo da IA. Analisando com o c√≥digo..."

    pontuacao = 0
    habilidades_encontradas = []
    
    for habilidade, valor in Habilidades_Chave.items():
        if re.search(r'\b' + re.escape(habilidade) + r'\b', texto_curriculo, re.I):
            pontuacao += valor
            habilidades_encontradas.append(habilidade)
            
    certificacoes_encontradas = []
    for certificacao, valor in Certificacoes_Chave.items():
        if re.search(r'\b' + re.escape(certificacao) + r'\b', texto_curriculo, re.I):
            pontuacao += valor
            certificacoes_encontradas.append(certificacao)
    
    nome = texto_curriculo.split('\n')[0].strip() if '\n' in texto_curriculo else "Nome n√£o encontrado"
    experiencia = re.findall(r'(\d+)\s+anos? de experi√™ncia', texto_curriculo, re.I)
    exp_anos = experiencia[0] if experiencia else "N√£o detectado"
    
    if pontuacao >= 70:
        status = "Pronto para Entrevista"
        justificativa = "A pontua√ß√£o √© alta devido √†s habilidades e certifica√ß√µes relevantes."
    elif pontuacao >= 40:
        status = "Analisar mais"
        justificativa = "O candidato tem habilidades, mas precisa de an√°lise mais detalhada."
    else:
        status = "N√£o recomendado"
        justificativa = "O curr√≠culo n√£o possui as habilidades-chave necess√°rias."
        
    return {
        "nome": nome,
        "resumo_analise": resumo_ia,
        "experiencia_anos": exp_anos,
        "habilidades_tecnicas": habilidades_encontradas,
        "certificacoes": certificacoes_encontradas,
        "pontuacao": min(pontuacao, 100),
